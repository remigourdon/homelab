---
# Based on kube-vip K3s guide: https://kube-vip.io/docs/usage/k3s/

- name: Create manifests directory on first server node
  file:
    path: /var/lib/rancher/k3s/server/manifests
    state: directory
    owner: root
    group: root
    mode: 0644
  when: ansible_hostname == hostvars[groups['k3s_servers'][0]]['ansible_hostname']

- name: Copy kube-vip RBAC manifest to first server node
  template:
    src: kube-vip-rbac.yaml.j2
    dest: /var/lib/rancher/k3s/server/manifests/kube-vip-rbac.yaml
    owner: root
    group: root
    mode: 0644
  when: ansible_hostname == hostvars[groups['k3s_servers'][0]]['ansible_hostname']

- name: Copy kube-vip manifest to first server node
  template:
    src: kube-vip.yaml.j2
    dest: /var/lib/rancher/k3s/server/manifests/kube-vip.yaml
    owner: root
    group: root
    mode: 0644
  when: ansible_hostname == hostvars[groups['k3s_servers'][0]]['ansible_hostname']

- name: Copy kube-vip Cloud Controller manifest to first server node
  template:
    src: kube-vip-cloud-controller.yaml.j2
    dest: /var/lib/rancher/k3s/server/manifests/kube-vip-cloud-controller.yaml
    owner: root
    group: root
    mode: 0644
  when: ansible_hostname == hostvars[groups['k3s_servers'][0]]['ansible_hostname']

- name: Initialize cluster on first server node
  command:
    cmd: "systemd-run
        --property RestartSec=2 \
        --property Restart=on-failure \
        --unit=k3s-init \
        k3s server {{ k3s_server_first_arg }} \
          --node-taint node-role.kubernetes.io/master=true:NoSchedule \
          --flannel-iface={{ kube_vip_interface }} \
          --node-ip={{ k3s_node_ip }} \
          --token {{ k3s_token }} \
          --tls-san {{ kube_vip_ip }} \
          --disable servicelb \
          --disable traefik"
    creates: /etc/systemd/system/k3s.service
  args:
    warn: false  # The ansible systemd module does not support transient units

- name: Verification
  block:
    - name: Verify that all nodes actually joined (check k3s-init.service if this fails)
      command:
        cmd: k3s kubectl get nodes -l "node-role.kubernetes.io/master=true" -o=jsonpath="{.items[*].metadata.name}"
      register: nodes
      until: nodes.rc == 0 and (nodes.stdout.split() | length) == (groups['k3s_servers'] | length)
      retries: 20
      delay: 30
      changed_when: false
  always:
    - name: Kill the temporary service used for initialization
      systemd:
        name: k3s-init
        state: stopped
      failed_when: false
  when: not ansible_check_mode

- name: Copy K3s service file
  register: k3s_service
  template:
    src: "k3s.service.j2"
    dest: /etc/systemd/system//k3s.service
    owner: root
    group: root
    mode: 0644

- name: Enable and check K3s service
  systemd:
    name: k3s
    daemon_reload: yes
    state: restarted
    enabled: yes

- name: Wait for node-token
  wait_for:
    path: /var/lib/rancher/k3s/server/node-token

- name: Register node-token file access mode
  stat:
    path: /var/lib/rancher/k3s/server
  register: p

- name: Change file access node-token
  file:
    path: /var/lib/rancher/k3s/server
    mode: "g+rx,o+rx"

- name: Read node-token from server
  slurp:
    src: /var/lib/rancher/k3s/server/node-token
  register: node_token

- name: Store server node-token
  set_fact:
    token: "{{ node_token.content | b64decode | regex_replace('\n', '') }}"

- name: Restore node-token file access
  file:
    path: /var/lib/rancher/k3s/server
    mode: "{{ p.stat.mode }}"

- name: Create directory .kube
  file:
    path: ~{{ ansible_user }}/.kube
    state: directory
    owner: "{{ ansible_user }}"
    mode: "u=rwx,g=rx,o="

- name: Copy config file to user home directory
  copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: ~{{ ansible_user }}/.kube/config
    remote_src: yes
    owner: "{{ ansible_user }}"
    mode: "u=rw,g=,o="

- name: Configure kubectl cluster to {{ endpoint_url }}
  command: >-
    k3s kubectl config set-cluster default
      --server={{ endpoint_url }}
      --kubeconfig ~{{ ansible_user }}/.kube/config
  changed_when: true
  vars:
    endpoint_url: >-
      https://{{ kube_vip_ip | ansible.utils.ipwrap }}:6443
  # Deactivated linter rules:
  #   - jinja[invalid]: As of version 6.6.0, ansible-lint complains that the input to ipwrap
  #                     would be undefined. This will not be the case during playbook execution.
  # noqa jinja[invalid]

- name: Create kubectl symlink
  file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/kubectl
    state: link

- name: Create crictl symlink
  file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/crictl
    state: link

- name: Get contents of manifests folder
  find:
    paths: /var/lib/rancher/k3s/server/manifests
    file_type: file
  register: k3s_server_manifests

- name: Get sub dirs of manifests folder
  find:
    paths: /var/lib/rancher/k3s/server/manifests
    file_type: directory
  register: k3s_server_manifests_directories

- name: Remove manifests and folders that are only needed for bootstrapping cluster so k3s doesn't auto apply on start
  file:
    path: "{{ item.path }}"
    state: absent
  with_items:
    - "{{ k3s_server_manifests.files }}"
    - "{{ k3s_server_manifests_directories.files }}"
  loop_control:
    label: "{{ item.path }}"